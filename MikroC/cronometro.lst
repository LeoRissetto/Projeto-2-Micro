;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 31/10/2024 16:15:17
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFB8  	GOTO        368
_interrupt:
;cronometro.c,46 :: 		void interrupt()
0x0008	0xF01DC000  	MOVFF       R0, 29
0x000C	0xF01CC001  	MOVFF       R1, 28
0x0010	0xF01BC002  	MOVFF       R2, 27
0x0014	0xF01AC003  	MOVFF       R3, 26
0x0018	0xF019C004  	MOVFF       R4, 25
0x001C	0xF018C005  	MOVFF       R5, 24
0x0020	0xF017C006  	MOVFF       R6, 23
0x0024	0xF016C007  	MOVFF       R7, 22
0x0028	0xF015C008  	MOVFF       R8, 21
;cronometro.c,49 :: 		if (INTCON.INT0IF)
0x002C	0xA2F2      	BTFSS       INTCON, 1 
0x002E	0xD007      	BRA         L_interrupt0
;cronometro.c,51 :: 		periodo = 4000;    // Define o período para 1 segundo
0x0030	0x0EA0      	MOVLW       160
0x0032	0x6E20      	MOVWF       _periodo 
0x0034	0x0E0F      	MOVLW       15
0x0036	0x6E21      	MOVWF       _periodo+1 
;cronometro.c,52 :: 		start_count = 1;   // Inicia a contagem
0x0038	0x0E01      	MOVLW       1
0x003A	0x6E1E      	MOVWF       _start_count 
;cronometro.c,53 :: 		INTCON.INT0IF = 0; // Zera a flag de interrupção INT0
0x003C	0x92F2      	BCF         INTCON, 1 
;cronometro.c,54 :: 		}
L_interrupt0:
;cronometro.c,57 :: 		if (INTCON3.INT1IF)
0x003E	0xA0F0      	BTFSS       INTCON3, 0 
0x0040	0xD007      	BRA         L_interrupt1
;cronometro.c,59 :: 		periodo = 1000;      // Define o período para 0,25 segundos
0x0042	0x0EE8      	MOVLW       232
0x0044	0x6E20      	MOVWF       _periodo 
0x0046	0x0E03      	MOVLW       3
0x0048	0x6E21      	MOVWF       _periodo+1 
;cronometro.c,60 :: 		start_count = 1;    // Inicia a contagem
0x004A	0x0E01      	MOVLW       1
0x004C	0x6E1E      	MOVWF       _start_count 
;cronometro.c,61 :: 		INTCON3.INT1IF = 0; // Zera a flag de interrupção INT1
0x004E	0x90F0      	BCF         INTCON3, 0 
;cronometro.c,62 :: 		}
L_interrupt1:
;cronometro.c,65 :: 		if (INTCON.TMR0IF)
0x0050	0xA4F2      	BTFSS       INTCON, 2 
0x0052	0xD030      	BRA         L_interrupt2
;cronometro.c,67 :: 		if (start_count)
0x0054	0x521E      	MOVF        _start_count, 1 
0x0056	0xE008      	BZ          L_interrupt3
;cronometro.c,69 :: 		contador++; // Incrementa o contador
0x0058	0x2A1F      	INCF        _contador, 1 
;cronometro.c,70 :: 		if (contador > 9)
0x005A	0x501F      	MOVF        _contador, 0 
0x005C	0x0809      	SUBLW       9
0x005E	0xA0D8      	BTFSS       STATUS, 0 
;cronometro.c,71 :: 		contador = 0;       // Reinicia a contagem após 9
0x0060	0x6A1F      	CLRF        _contador 
L_interrupt4:
;cronometro.c,72 :: 		ExibirNumero(contador); // Exibe o número no display
0x0062	0xF02CC01F  	MOVFF       _contador, FARG_ExibirNumero_numero
0x0066	0xD863      	RCALL       _ExibirNumero
;cronometro.c,73 :: 		}
L_interrupt3:
;cronometro.c,76 :: 		TMR0H = (65536 - (periodo * 2)) >> 8;   // Carrega valor alto
0x0068	0xF000C020  	MOVFF       _periodo, R0
0x006C	0xF001C021  	MOVFF       _periodo+1, R1
0x0070	0x3600      	RLCF        R0, 1 
0x0072	0x9000      	BCF         R0, 0 
0x0074	0x3601      	RLCF        R1, 1 
0x0076	0x0E00      	MOVLW       0
0x0078	0x6E05      	MOVWF       R5 
0x007A	0x0E00      	MOVLW       0
0x007C	0x6E06      	MOVWF       R6 
0x007E	0x0E01      	MOVLW       1
0x0080	0x6E07      	MOVWF       R7 
0x0082	0x0E00      	MOVLW       0
0x0084	0x6E08      	MOVWF       R8 
0x0086	0x5000      	MOVF        R0, 0 
0x0088	0x5E05      	SUBWF       R5, 1 
0x008A	0x5001      	MOVF        R1, 0 
0x008C	0x5A06      	SUBWFB      R6, 1 
0x008E	0x0E00      	MOVLW       0
0x0090	0x5A07      	SUBWFB      R7, 1 
0x0092	0x5A08      	SUBWFB      R8, 1 
0x0094	0xF000C006  	MOVFF       R6, R0
0x0098	0xF001C007  	MOVFF       R7, R1
0x009C	0xF002C008  	MOVFF       R8, R2
0x00A0	0x0E00      	MOVLW       0
0x00A2	0xBE08      	BTFSC       R8, 7 
0x00A4	0x0EFF      	MOVLW       255
0x00A6	0x6E03      	MOVWF       R3 
0x00A8	0xFFD7C000  	MOVFF       R0, TMR0H
;cronometro.c,77 :: 		TMR0L = (65536 - (periodo * 2)) & 0xFF; // Carrega valor baixo
0x00AC	0x0EFF      	MOVLW       255
0x00AE	0x1405      	ANDWF       R5, 0 
0x00B0	0x6ED6      	MOVWF       TMR0L 
;cronometro.c,79 :: 		INTCON.TMR0IF = 0; // Zera a flag de overflow do Timer0
0x00B2	0x94F2      	BCF         INTCON, 2 
;cronometro.c,80 :: 		}
L_interrupt2:
;cronometro.c,81 :: 		}
L_end_interrupt:
L__interrupt11:
0x00B4	0xF000C01D  	MOVFF       29, R0
0x00B8	0xF001C01C  	MOVFF       28, R1
0x00BC	0xF002C01B  	MOVFF       27, R2
0x00C0	0xF003C01A  	MOVFF       26, R3
0x00C4	0xF004C019  	MOVFF       25, R4
0x00C8	0xF005C018  	MOVFF       24, R5
0x00CC	0xF006C017  	MOVFF       23, R6
0x00D0	0xF007C016  	MOVFF       22, R7
0x00D4	0xF008C015  	MOVFF       21, R8
0x00D8	0x0011      	RETFIE      1
; end of _interrupt
_ConfigTIMER:
;cronometro.c,30 :: 		void ConfigTIMER()
;cronometro.c,32 :: 		T0CON = 0x87;                           // Timer0 ligado, 16 bits, prescaler 1:256
0x00DA	0x0E87      	MOVLW       135
0x00DC	0x6ED5      	MOVWF       T0CON 
;cronometro.c,33 :: 		TMR0H = (65536 - (periodo * 2)) >> 8;   // Carrega valor alto
0x00DE	0xF000C020  	MOVFF       _periodo, R0
0x00E2	0xF001C021  	MOVFF       _periodo+1, R1
0x00E6	0x3600      	RLCF        R0, 1 
0x00E8	0x9000      	BCF         R0, 0 
0x00EA	0x3601      	RLCF        R1, 1 
0x00EC	0x0E00      	MOVLW       0
0x00EE	0x6E05      	MOVWF       R5 
0x00F0	0x0E00      	MOVLW       0
0x00F2	0x6E06      	MOVWF       R6 
0x00F4	0x0E01      	MOVLW       1
0x00F6	0x6E07      	MOVWF       R7 
0x00F8	0x0E00      	MOVLW       0
0x00FA	0x6E08      	MOVWF       R8 
0x00FC	0x5000      	MOVF        R0, 0 
0x00FE	0x5E05      	SUBWF       R5, 1 
0x0100	0x5001      	MOVF        R1, 0 
0x0102	0x5A06      	SUBWFB      R6, 1 
0x0104	0x0E00      	MOVLW       0
0x0106	0x5A07      	SUBWFB      R7, 1 
0x0108	0x5A08      	SUBWFB      R8, 1 
0x010A	0xF000C006  	MOVFF       R6, R0
0x010E	0xF001C007  	MOVFF       R7, R1
0x0112	0xF002C008  	MOVFF       R8, R2
0x0116	0x0E00      	MOVLW       0
0x0118	0xBE08      	BTFSC       R8, 7 
0x011A	0x0EFF      	MOVLW       255
0x011C	0x6E03      	MOVWF       R3 
0x011E	0xFFD7C000  	MOVFF       R0, TMR0H
;cronometro.c,34 :: 		TMR0L = (65536 - (periodo * 2)) & 0xFF; // Carrega valor baixo
0x0122	0x0EFF      	MOVLW       255
0x0124	0x1405      	ANDWF       R5, 0 
0x0126	0x6ED6      	MOVWF       TMR0L 
;cronometro.c,35 :: 		INTCON.TMR0IF = 0;                      // Zera a flag de overflow do Timer0
0x0128	0x94F2      	BCF         INTCON, 2 
;cronometro.c,36 :: 		INTCON.TMR0IE = 1;                      // Habilita a interrupção do Timer0
0x012A	0x8AF2      	BSF         INTCON, 5 
;cronometro.c,37 :: 		}
L_end_ConfigTIMER:
0x012C	0x0012      	RETURN      0
; end of _ConfigTIMER
_ExibirNumero:
;cronometro.c,40 :: 		void ExibirNumero(unsigned char numero)
;cronometro.c,42 :: 		PORTD = display7seg[numero]; // Exibe o número no display
0x012E	0x0E22      	MOVLW       _display7seg
0x0130	0x6EE9      	MOVWF       FSR0L 
0x0132	0x0E00      	MOVLW       hi_addr(_display7seg)
0x0134	0x6EEA      	MOVWF       FSR0L+1 
0x0136	0x502C      	MOVF        FARG_ExibirNumero_numero, 0 
0x0138	0x26E9      	ADDWF       FSR0L, 1 
0x013A	0xB0D8      	BTFSC       STATUS, 0 
0x013C	0x2AEA      	INCF        FSR0L+1, 1 
0x013E	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;cronometro.c,43 :: 		}
L_end_ExibirNumero:
0x0142	0x0012      	RETURN      0
; end of _ExibirNumero
_ConfigMCU:
;cronometro.c,9 :: 		void ConfigMCU()
;cronometro.c,11 :: 		ADCON1 = 0x0F; // Configura todos os pinos como digitais
0x0144	0x0E0F      	MOVLW       15
0x0146	0x6EC1      	MOVWF       ADCON1 
;cronometro.c,13 :: 		TRISB.B0 = 1; // Configura RB0 como entrada (botão 1)
0x0148	0x8093      	BSF         TRISB, 0 
;cronometro.c,14 :: 		TRISB.B1 = 1; // Configura RB1 como entrada (botão 2)
0x014A	0x8293      	BSF         TRISB, 1 
;cronometro.c,15 :: 		TRISD = 0x00; // Configura PORTD como saída (display de 7 segmentos)
0x014C	0x6A95      	CLRF        TRISD 
;cronometro.c,16 :: 		PORTD = 0x00; // Display inicialmente desligado
0x014E	0x6A83      	CLRF        PORTD 
;cronometro.c,18 :: 		INTCON2.INTEDG0 = 1; // Interrupção na borda de subida para INT0 (RB0)
0x0150	0x8CF1      	BSF         INTCON2, 6 
;cronometro.c,19 :: 		INTCON2.INTEDG1 = 1; // Interrupção na borda de subida para INT1 (RB1)
0x0152	0x8AF1      	BSF         INTCON2, 5 
;cronometro.c,21 :: 		INTCON.INT0IF = 0;  // Zera a flag de interrupção INT0
0x0154	0x92F2      	BCF         INTCON, 1 
;cronometro.c,22 :: 		INTCON.INT0IE = 1;  // Habilita a interrupção INT0
0x0156	0x88F2      	BSF         INTCON, 4 
;cronometro.c,23 :: 		INTCON3.INT1IF = 0; // Zera a flag de interrupção INT1
0x0158	0x90F0      	BCF         INTCON3, 0 
;cronometro.c,24 :: 		INTCON3.INT1IE = 1; // Habilita a interrupção INT1
0x015A	0x86F0      	BSF         INTCON3, 3 
;cronometro.c,26 :: 		INTCON.GIE = 1; // Habilita interrupções globais
0x015C	0x8EF2      	BSF         INTCON, 7 
;cronometro.c,27 :: 		}
L_end_ConfigMCU:
0x015E	0x0012      	RETURN      0
; end of _ConfigMCU
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0160	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0162	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0166	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0168	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x016A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x016C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x016E	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x0170	0x6A1E      	CLRF        _start_count 
0x0172	0x6A1F      	CLRF        _contador 
0x0174	0x0EA0      	MOVLW       160
0x0176	0x6E20      	MOVWF       _periodo 
0x0178	0x0E0F      	MOVLW       15
0x017A	0x6E21      	MOVWF       33 
0x017C	0x0E3F      	MOVLW       63
0x017E	0x6E22      	MOVWF       _display7seg 
0x0180	0x0E06      	MOVLW       6
0x0182	0x6E23      	MOVWF       35 
0x0184	0x0E5B      	MOVLW       91
0x0186	0x6E24      	MOVWF       36 
0x0188	0x0E4F      	MOVLW       79
0x018A	0x6E25      	MOVWF       37 
0x018C	0x0E66      	MOVLW       102
0x018E	0x6E26      	MOVWF       38 
0x0190	0x0E6D      	MOVLW       109
0x0192	0x6E27      	MOVWF       39 
0x0194	0x0E7D      	MOVLW       125
0x0196	0x6E28      	MOVWF       40 
0x0198	0x0E07      	MOVLW       7
0x019A	0x6E29      	MOVWF       41 
0x019C	0x0E7F      	MOVLW       127
0x019E	0x6E2A      	MOVWF       42 
0x01A0	0x0E6F      	MOVLW       111
0x01A2	0x6E2B      	MOVWF       43 
;cronometro.c,84 :: 		void main()
;cronometro.c,86 :: 		ConfigMCU();   // Configura o microcontrolador
0x01A4	0xDFCF      	RCALL       _ConfigMCU
;cronometro.c,87 :: 		ConfigTIMER(); // Configura o Timer0
0x01A6	0xDF99      	RCALL       _ConfigTIMER
;cronometro.c,89 :: 		while (1)
L_main5:
;cronometro.c,92 :: 		}
0x01A8	0xD7FF      	BRA         L_main5
;cronometro.c,93 :: 		}
L_end_main:
0x01AA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [210]    _interrupt
0x00DA      [84]    _ConfigTIMER
0x012E      [22]    _ExibirNumero
0x0144      [28]    _ConfigMCU
0x0160      [16]    ___CC2DW
0x0170      [60]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001E       [1]    _start_count
0x001F       [1]    _contador
0x0020       [2]    _periodo
0x0022      [10]    _display7seg
0x002C       [1]    FARG_ExibirNumero_numero
0x0F83       [1]    PORTD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
